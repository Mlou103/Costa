// Inclure les bibliothèques nécessaires pour le projet
#include <Arduino.h>           // Inclure la bibliothèque principale d'Arduino
#include <WiFi.h>              // Inclure la bibliothèque WiFi
#include <DHT.h>               // Inclure la bibliothèque DHT (capteur de température et d'humidité)
#include <Firebase_ESP_Client.h> // Inclure la bibliothèque Firebase pour ESP8266 et ESP32

// Inclure des fichiers d'aide pour le jeton et la base de données
#include "addons/TokenHelper.h" // Inclure un fichier d'aide pour le jeton Firebase
#include "addons/RTDBHelper.h"  // Inclure un fichier d'aide pour la base de données en temps réel Firebase

// Mettez vos identifiants WiFi ici
#define WIFI_SSID "CHEVAL_DE_3 9097"   // Remplacez par le nom de votre réseau WiFi
#define WIFI_PASSWORD "3E14h:67"       // Remplacez par le mot de passe de votre réseau WiFi

// Mettez la clé API de votre projet Firebase ici
#define API_KEY "AIzaSyBITx2fRtPBMOkWFVhCSCUtwVryAuCRMKw" // Remplacez par votre clé API Firebase

// URL de la base de données en temps réel Firebase
#define DATABASE_URL "https://tp4a-12245-default-rtdb.europe-west1.firebasedatabase.app/"

// Configuration de la LED
#define  LED 2       // Broche utilisée pour la LED
bool Etat_LED;      // Variable pour stocker l'état de la LED (allumée ou éteinte)

// Configuration du capteur DHT11
#define DHTPIN 26     // Broche à laquelle est connecté le capteur DHT11
#define DHTTYPE DHT11 // Type du capteur DHT (DHT11)
DHT dht(DHTPIN, DHTTYPE); // Création d'un objet DHT

// Initialisation des objets pour Firebase
FirebaseData fbdo; // Objet pour les opérations Firebase
FirebaseAuth auth;  // Objet pour l'authentification Firebase
FirebaseConfig config; // Objet pour la configuration Firebase
FirebaseData stream; // Objet pour la diffusion en continu Firebase
volatile bool dataChanged = false; // Variable pour indiquer si les données ont changé

// Fonction de rappel pour la diffusion en continu Firebase
void streamCallback(FirebaseStream data)
{
  Serial.printf("sream path, %s\nevent path, %s\ndata type, %s\nevent type, %s\n\n",
                data.streamPath().c_str(),
                data.dataPath().c_str(),
                data.dataType().c_str(),
                data.eventType().c_str());
  printResult(data); // Fonction pour afficher les résultats (définie ailleurs)
  Serial.println();

  // Taille de la charge utile de la diffusion en continu reçue (actuelle et maximale)
  // La taille maximale de la charge utile est la taille de la charge utile sous le chemin de diffusion depuis la connexion de la diffusion en continu
  // et sa lecture une fois, et ne se mettra pas à jour tant que la reconnexion de la diffusion en continu n'aura pas lieu.
  // Cette valeur maximale sera nulle car aucune charge utile n'a été reçue en cas d'ESP8266 où
  // la taille du tampon Rx réservé par BearSSL est inférieure à la taille réelle de la charge utile de la diffusion en continu.
  Serial.printf("Received stream payload size: %d (Max. %d)\n\n", data.payloadLength(), data.maxPayloadLength());

  // En raison de la mémoire de pile limitée, ne réalisez aucune tâche nécessitant une mémoire importante ici, en particulier la connexion au serveur.
  // Définissez simplement ce drapeau et vérifiez son état plus tard.
  dataChanged = true;
}

// Fonction de rappel pour le délai de diffusion en continu
void streamTimeoutCallback(bool timeout)
{
  if (timeout)
    Serial.println("stream timed out, resuming...\n");

  if (!stream.httpConnected())
    Serial.printf("error code: %d, reason: %s\n\n", stream.httpCode(), stream.errorReason().c_str());
}

// Variables pour la logique du programme
unsigned long sendDataPrevMillis = 0; // Variable pour stocker le temps de la dernière envoi de données
int count = 0; // Compteur
int temp, humi, valeur_ldr; // Variables pour stocker les données du capteur DHT et de la LDR
bool signupOK = false; // Variable pour indiquer si l'inscription à Firebase a réussi
const int ldr = 39; // Broche à laquelle est connectée la LDR

// Configuration initiale
void setup()
{
  // Configuration de la communication série et du WiFi
  Serial.begin(115200); // Initialiser la communication série à 115200 bauds
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD); // Se connecter au WiFi en utilisant les identifiants définis
  Serial.print("Connecting to Wi-Fi");

  // Attendre la connexion au WiFi
  while (WiFi.status() != WL_CONNECTED)
  {
    Serial.print(".");
    delay(300);
  }

  // Informations de connexion WiFi
  Serial.println();
  Serial.print("Connected with IP: ");
  Serial.println(WiFi.localIP());
  Serial.println();

  // Configuration de Firebase
  config.api_key = API_KEY; // Définir la clé API Firebase
  config.database_url = DATABASE_URL; // Définir l'URL de la base de données Firebase

  // Inscription
  if (Firebase.signUp(&config, &auth, "", ""))
  {
    Serial.println("ok"); // Afficher "ok" si l'inscription a réussi
    signupOK = true; // Mettre la variable d'inscription à true
  }
  else
  {
    Serial.printf("%s\n", config.signer.signupError.message.c_str()); // Afficher un message d'erreur en cas d'échec de l'inscription
  }

  // Autres configurations pour Firebase
  config.token_status_callback = tokenStatusCallback; // Définir la fonction de rappel pour le statut du jeton (non définie ici)
  Firebase.reconnectNetwork(true); // Reconnecter le réseau Firebase
  fbdo.setBSSLBufferSize(2048 /* Rx buffer size in bytes from 512 - 16384 */, 1024 /* Tx buffer size in bytes from 512 - 16384 */);
  stream.setBSSLBufferSize(2048 /* Rx buffer size in bytes from 512 - 16384 */, 1024 /* Tx buffer size in bytes from 512 - 16384 */);
  Firebase.begin(&config, &auth); // Initialiser Firebase avec la configuration et l'authentification
  stream.keepAlive(5, 5, 1); // Configurer le maintien de la diffusion en continu
  if (!Firebase.RTDB.beginStream(&stream, "TP4A/LED"))
    Serial.printf("sream begin error, %s\n\n", stream.errorReason().c_str()); // Afficher une erreur en cas d'échec de la diffusion en continu

  Firebase.RTDB.setStreamCallback(&stream, streamCallback, streamTimeoutCallback); // Définir les fonctions de rappel pour la diffusion en continu
  Firebase.reconnectWiFi(true); // Reconnecter le WiFi

  // Configuration de la LED
  pinMode(LED, OUTPUT); // Configurer la broche de la LED en sortie
  digitalWrite(LED, LOW); // Mettre l'état de la LED à 0 (éteinte)

  // Démarrage du capteur DHT11 et configuration du capteur de luminosité
  dht.begin(); // Initialiser le capteur DHT11
  pinMode(ldr, INPUT); // Configurer la broche de la LDR en entrée
}

// Boucle principale
void loop()
{
  // Envoyer des données si Firebase est prêt et si 15 secondes se sont écoulées
  if (dataChanged)
  {
    if (Firebase.RTDB.getBool(&fbdo, "TP4A/LED"))
    {
      if (fbdo.dataType() == "boolean")
      {
        Etat_LED = fbdo.boolData(); // Lire l'état de la LED depuis Firebase
        digitalWrite(LED, Etat_LED); // Mettre à jour l'état de la LED en fonction des données Firebase
        Serial.println("Lecture LED : PASSED "); // Afficher un message si la lecture de la LED a réussi
      }
      else
      {
        Serial.println("Lecture LED : FAILED "); // Afficher un message si la lecture de la LED a échoué
      }
    }
    dataChanged = false; // Réinitialiser le drapeau indiquant que les données ont changé

    // Quand des données sont disponibles en streaming, effectuer des actions ici...
  }
  if (Firebase.ready() && signupOK && (millis() - sendDataPrevMillis > 15000 || sendDataPrevMillis == 0))
  {
    sendDataPrevMillis = millis(); // Mettre à jour le temps de la dernière envoi de données

    // Lecture des capteurs
    temp = dht.readTemperature(); // Lire la température du capteur DHT
    humi = dht.readHumidity();    // Lire l'humidité du capteur DHT
    valeur_ldr = analogRead(ldr); // Lire la valeur de la LDR

    // Mise en % de la valeur de la LDR
    valeur_ldr = (2500 - valeur_ldr) * 100 / 2500;

    // Envoi de la température à Firebase
    if (Firebase.RTDB.setInt(&fbdo, "TP4A/Temperature", temp))
    {
      Serial.println("Temp : PASSED"); // Afficher un message si l'envoi de la température a réussi
      Serial.println(temp);
    }
    else
    {
      Serial.println("Temp : FAILED"); // Afficher un message si l'envoi de la température a échoué
    }

    // Envoi de l'humidité à Firebase
    if (Firebase.RTDB.setInt(&fbdo, "TP4A/Humidite", humi))
    {
      Serial.println("humidity : PASSED"); // Afficher un message si l'envoi de l'humidité a réussi
    }
    else
    {
      Serial.println("humidity : FAILED"); // Afficher un message si l'envoi de l'humidité a échoué
    }

    // Envoi de la luminosité à Firebase
    if (Firebase.RTDB.setInt(&fbdo, "TP4A/Luminosite", valeur_ldr))
    {
      Serial.println("Luminosite : PASSED"); // Afficher un message si l'envoi de la luminosité a réussi
    }
    else
    {
      Serial.println("luminosite : FAILED"); // Afficher un message si l'envoi de la luminosité a échoué
    }
  }
}
