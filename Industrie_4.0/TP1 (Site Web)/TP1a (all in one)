
#include <WiFi.h>
#include <Adafruit_Sensor.h>
#include <DHT.h>
#include <DHT_U.h>

//bibliothèques pour OLED
#include <Wire.h>               // Inclure la bibliothèque pour la communication I2C
#include <Adafruit_GFX.h>       // Inclure la bibliothèque pour les fonctionnalités graphiques
#include <Adafruit_SSD1306.h>   // Inclure la bibliothèque pour l'écran OLED
#define SCREEN_WIDTH 128        // Largeur de l'écran OLED en pixels
#define SCREEN_HEIGHT 64        // Hauteur de l'écran OLED en pixels
#define OLED_RESET    -1        // Pas de pin de réinitialisation pour la plupart des modules OLED
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
bool start = true;

const char* ssid = "CHEVAL_DE_3 9097";  /*Entrer Le SSID*/
const char* password = "3E14h:67";  /*Entrer Le Mdp*/
WiFiClient client; /*Objet client*/
WiFiServer server(80); /*port par defaut pour un site en html (Port HTTP)*/
String request;

#define DHTPIN 26
#define DHTTYPE    DHT11 
DHT_Unified dht(DHTPIN, DHTTYPE);
uint32_t delayMS;
String Temp;
String Hum;
#define  LED 2 /*Instancie la pin GP2 à la variable LED*/
int LED_Status; /*Création d'une varibale int */

void draw() {
  display.clearDisplay();
  //LED
  display.setTextSize(2); // Taille du texte plus grande pour l'état de la LED
  display.setTextColor(SSD1306_WHITE); // Couleur du texte en blanc
  display.setCursor(0, 0); // Position du début du texte en haut à gauche
  display.println(LED_Status ? "LED ON" : "LED OFF");
// Temp et Hum
  display.setTextSize(1); // Taille du texte normale pour la température et l'humidité
  display.setCursor(0, 20); // Position du début du texte en dessous de l'état de la LED
  display.print("Temp: ");
  display.print(Temp);
  display.println(" C");

  display.setCursor(0, 30); // Position du début du texte pour l'humidité
  display.print("Hum: ");
  display.print(Hum);
  display.println(" %");
  
  display.display(); // Actualisez l'affichage avec les nouvelles données
}

void setup() 
{
    // Initialiser l'écran OLED avec l'adresse I2C standard (0x3C ou 0x3D pour certains écrans)
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { 
    Serial.println(F("SSD1306 allocation failed"));
    for(;;); // Boucle infinie si l'écran ne peut pas être initialisé
  }
  display.clearDisplay();  // Effacer l'affichage
  Serial.begin(115200); /*Vitesse de communication bauds*/ 
  dht.begin(); /*Lance la lecture des données*/
  pinMode(LED, OUTPUT); /*configuration de la Pin en sortie*/
  digitalWrite(LED, LOW); /*Etat de base à 0*/
  Serial.print("Connecting to: ");
  Serial.println(ssid);
  WiFi.mode(WIFI_STA); /*se connecte à un réseau Wi-Fi existant, plutôt que de créer son propre réseau Wi-Fi.*/
  WiFi.begin(ssid, password); /*tente de se connecter au réseau Wi-Fi en utilisant les informations fournies dans les variables ssid et password*/
  while(WiFi.status() != WL_CONNECTED) /*Tant que la connexion n'est pas établis :*/
  {
    Serial.print(".");
    delay(100);
  }
  /*Une fois la connexion faite*/
  Serial.print("\n");
  Serial.print("Connected to Wi-Fi ");
  Serial.println(WiFi.SSID());
  delay(1000);
  server.begin(); /* Lance le serveur Http */
  Serial.print("Connect to IP Address: ");
  Serial.print("http://");
  Serial.println(WiFi.localIP());
}

void html (){
  // Définition des en-têtes de la réponse HTTP
  client.println("HTTP/1.1 200 OK");
  client.println("Content-Type: text/html");
  client.println("Connection: close");
  client.println();
  // Début de la structure HTML
  client.println("<!DOCTYPE HTML>");
  client.println("<html>");

  client.println("<head>");
    client.println("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">");
    client.println("<link rel=\"icon\" href=\"data:,\">");
  // Styles CSS pour la page
    client.println("<style>");
      client.println("html { font-family: Roboto; display: inline-block; margin: 0px auto; text-align: left;}");
      client.println(".button {background-color: #4CAF50; border: none; color: white; padding: 15px 32px; text-align: center; text-decoration: none; display: inline-block; font-size: 16px; margin: 4px 2px; cursor: pointer;");
      client.println("text-decoration: none; font-size: 25px; margin: 2px; cursor: pointer;}");
      client.println(".button_ON {background-color: white; color: black; border: 2px solid #4CAF50;}"); //deco bouton ON
      client.println(".button_OFF {background-color: white; color: black; border: 2px solid #f44336;}"); //deco bouton off
    client.println("</style>");
  //HTML BRUT
  client.println("</head>");
  client.println("<body>");
  client.println("<h2>TP1a</h2>");
  client.println("<p>Click to Turn ON and OFF the LED</p>");
  client.println("<p><h2>Temperature:</h2>"+Temp+"C</p>");
  client.println("<p><h2>Humidite:</h2>"+Hum+" %</p>");
   // Condition pour afficher le bouton "ON" ou "OFF" en fonction de l'état de la LED
  if(LED_Status == LOW) 
  { // Bouton "ON" avec un lien vers "/LED_ON" et une classe CSS
    client.print("<p><a href=\"/LED_ON\n\"><button class=\"button button_ON\">ON</button></a></p>"); 
  } 
 
  else
  { // Bouton "OFF" avec un lien vers "/LED_OFF" et une classe CSS
    client.print("<p><a href=\"/LED_OFF\n\"><button class=\"button button_OFF\">OFF</button></a></p>"); 
  } 
 
  client.println("</body>");
  // Fin de la structure HTML
 client.println("</html>");     
}

void loop() {
  delay(delayMS);
  sensors_event_t event;
  dht.temperature().getEvent(&event);
  if (isnan(event.temperature)) {
    Serial.println(F("Error reading temperature!"));
  }
  else {
    Serial.print(F("Temperature: "));
    Serial.print(event.temperature);
    Serial.println(F("°C"));
    Temp = (event.temperature);
    draw();
  }
  // Get humidity event and print its value.
  dht.humidity().getEvent(&event);
  if (isnan(event.relative_humidity)) {
    Serial.println(F("Error reading humidity!"));
  }
  else {
    Serial.print(F("Humidity: "));
    Serial.print(event.relative_humidity);
    Serial.println(F("%"));
    Hum = (event.relative_humidity);
    draw();
  }
  delay(1000);


  // Vérifie si un client a établi une connexion avec le serveur
  client = server.available();
  if (!client) {
    return;
  }

  // Tant que le client est connecté
  while (client.connected()) {
    // Vérifie si des données sont disponibles depuis le client
    if (client.available()) {
      // Lit un caractère du client
      char c = client.read();
      request += c;

      // Si le caractère lu est un retour à la ligne, cela indique la fin d'une requête HTTP
      if (c == '\n') {
        // Vérifie si la requête contient "GET /LED_ON"
        if (request.indexOf("GET /LED_ON") != -1) {
          // Allume la LED et met à jour son état
          Serial.println("LED in ON");
          digitalWrite(LED, HIGH);
          LED_Status = HIGH;
          draw();
        }

        // Vérifie si la requête contient "GET /LED_OFF"
        if (request.indexOf("GET /LED_OFF") != -1) {
          // Éteint la LED et met à jour son état
          Serial.println("LED in OFF");
          digitalWrite(LED, LOW);
          LED_Status = LOW;
          draw();
        }

        // Appelle la fonction html() pour générer une réponse HTML
        html();
        // Sort de la boucle while
        break;
      }
    }
  }

  // Petite pause
  delay(1);
  // Réinitialise la variable "request" pour la prochaine requête
  request = "";
  // Ferme la connexion avec le client
  client.stop();
}
